To make a new collectable:
	1) Create a new collectable resource for it. 
		a) Hover over the folder Resources/Inventory/Collectables until a drop-down menu appears.
		b) Select "Create New..." > Resource > InventoryCollectable and hit create. This will open the "save as" menu: change the name to your desired name and double-check the file path is correct, then hit save
		c) In the FileSystem, double click on your newly created resource. In the Inspector you should see two fields called Name and Texture. Type in the item and name select your desired texture from the drop-down menu or drag it in
			hint: if your image is one in a larger sheet, select "New AtlasTexture" from the menu and it will give you the option to select only part of the original image
		d) ctrol+s to save
	2) Create a new collectable scene for it. 
		a) Drag a new instance of the "generic_collectable.tscn" scene into the world
		b) Drag the desired collectables resource into the "Inventory Self" variable and set the desired amount

There are three types of files associated with the inventory:
	1) Scenes
		These are anything that is placable in world (including UI). 
		Scenes for the inventory are located in Scenes/Inventory, which contains the following:
			a) inventory_ui_slot.tscn - the scene for a single slot ui, which has a background, item display and count label
			b) inventory_ui.tscn - the scene for the entire inventory ui, which holds a GridContainer of (currently) 12 instances of Inventory_UI_slot scenes
			c) generic_collectable.tscn - the scene for representing the in-world versions of collectables
	
	2) Resources
		These are the back-end version of the inventory.
		Resources for the inventroy are located in Resources/Inventory, which contains the follwing:
				a) player_inventory.tres - the backend version of the player's inventory; it is an instance of the Inventory class
				b) Collectables - a folder which holds individual collectable's instance of the InventoryCollectable class - the in-inventory representation of the collectables
	
	3) Scripts
		These are code either attached to a instance of a Scene/Resource, or describing a new class of Scene/Resource
		They include any variables and functions that Scene/Resource may need.
		For example, the script inventory.gd lays out the code base for an Inventory class, a new resource. The resource player_inventory.tres is an instance of the Inventory class specifically for the player.
		Scripts for the inventory are placed in Scripts/Inventory, which contains the following:
			a) inventory_slot.gd - the InventorySlot class, a template for a resource which holds an InventoryCollectable resource (for ex. berry.tres) and an amount of them (for ex. 5)
			b) inventory.gd - the Inventory class, which holds an array of 12 InventorySlot instances; 
				the function insert(item: InventoryCollectable) takes in the in-inventory representation of an inventory collectable and searches the slots stored in the Array "slots". If it finds a stack with the given input, it increments to amount on the stack.
					If not, it searches the Array again for an empty stack. If it finds one, it updates the stack item and amount accordingly (amount = 1)
					Then it signals the inventory_ui to run the update_slots() function via a signal called "update"
			c) inventory_collectable.gd - the InventoryCollectable class, the framework for the in-inventory representation of collectables; holds a name and sprite image (Texture2D)
			
			d) generic_collectable.gp - the script which controls the behavior of the generic_collectable scene
			e) inventory_ui_slot.gd - the script for the inventory slots ui; handles updating the image sprite and amount label
			f) inventory_ui.gd - the script connected to the Inventory UI scene, handles opening&closing of the inventroy as well as telling the inventory slots to update when the inventory back-end representation, Inventory, emits the update signal
